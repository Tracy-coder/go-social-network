// Code generated by hertz generator.

package network

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	domain "go-social-network/biz/domain"
	"go-social-network/biz/logic"
	base "go-social-network/biz/model/base"
	network "go-social-network/biz/model/network"
	"go-social-network/data"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
)

// Register .
// @router /api/v1/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.UserRegisterReq
	resp := new(base.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var userRegisterReq domain.UserRegisterReq
	_ = copier.Copy(&userRegisterReq, &req)
	err = logic.NewUser(data.Default()).Register(ctx, userRegisterReq)
	if err != nil {
		resp.ErrCode = base.ErrCode_CreateUserError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /api/v1/user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.Empty
	resp := new(network.UserInfoResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	info, err := logic.NewUser(data.Default()).UserInfo(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetUserInfoError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	err = copier.Copy(resp, info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

func getUserID(c *app.RequestContext) (int64, error) {
	v, exist := c.Get("userID")
	if !exist || v == nil {
		return 0, errors.New("Unauthorized")
	}
	i, err := strconv.ParseInt(v.(string), 10, 64)
	if err != nil {
		return 0, err
	}
	return i, nil
}

// PostStatus .
// @router /api/v1/user/post [POST]
func PostStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.PostStatusReq
	err = c.BindAndValidate(&req)
	resp := new(network.PostStatusResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).PostStatus(ctx, userID, req.Message)
	if err != nil {
		resp.ErrCode = base.ErrCode_PostStatusError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	err = copier.Copy(resp, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetTimeline .
// @router /api/v1/user/timeline [GET]
func GetTimeline(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetTimelineReq
	err = c.BindAndValidate(&req)
	resp := new(network.GetTimelineResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetTimeline(ctx, userID, req.PageID, req.PageSize)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetTimelineError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	info := make([]*network.StatusInfo, len(res))
	err = copier.Copy(&info, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.Info = info
	resp.PageID = req.PageID
	c.JSON(consts.StatusOK, resp)
}

// FollowAndUnfollow .
// @router /api/v1/user/follow [POST]
func FollowAndUnfollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.FollowAndUnfollowReq
	resp := new(base.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if req.Action == true {
		err = logic.NewUser(data.Default()).FollowAction(ctx, userID, req.OtherID)
	} else {
		err = logic.NewUser(data.Default()).UnFollowAction(ctx, userID, req.OtherID)
	}
	if err != nil {
		resp.ErrCode = base.ErrCode_FollowAndUnfollowError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// Reset .
// @router /api/v1/reset [DELETE]
func Reset(ctx context.Context, c *app.RequestContext) {
	logic.NewUser(data.Default()).Reset(ctx)
}

// DeleteStatus .
// @router /api/v1/user/post [DELETE]
func DeleteStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.DeleteStatusReq
	err = c.BindAndValidate(&req)
	resp := new(base.BaseResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = logic.NewUser(data.Default()).DeleteStatus(ctx, userID, req.PostID)
	if err != nil {
		resp.ErrCode = base.ErrCode_DeleteStatusError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateChat .
// @router /api/v1/user/chats [POST]
func CreateChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.CreateChatReq
	err = c.BindAndValidate(&req)
	resp := new(network.CreateChatResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	chatID, err := logic.NewUser(data.Default()).CreateChat(ctx, userID, req.MemberID)
	if err != nil {
		resp.ErrCode = base.ErrCode_CreateChatError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.ID = chatID
	c.JSON(consts.StatusOK, resp)
}

// PostMessage .
// @router /api/v1/user/chat [POST]
func PostMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.PostMessageReq
	err = c.BindAndValidate(&req)
	resp := new(network.PostMessageResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	fmt.Println(req.ID, req.Message)
	info, err := logic.NewUser(data.Default()).PostMessage(ctx, userID, req.ID, req.Message)

	if err != nil {
		resp.ErrCode = base.ErrCode_PostMessageError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	info_ := new(network.MessageInfo)
	err = copier.Copy(info_, &info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.Info = info_
	c.JSON(consts.StatusOK, resp)
}

// GetPendingMessage .
// @router /api/v1/user/chat [GET]
func GetPendingMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetPendingMessageReq
	err = c.BindAndValidate(&req)
	resp := new(network.GetPendingMessageResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	info, err := logic.NewUser(data.Default()).GetPendingMessage(ctx, userID, req.ID)

	if err != nil {
		resp.ErrCode = base.ErrCode_CreateChatError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	fmt.Println("getpending: ", info)
	tmp := new(network.ChatMessageInfo)
	copier.Copy(tmp, info)
	resp.Info = tmp
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// LeaveChat .
// @router /api/v1/user/chat [DELETE]
func LeaveChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.LeaveChatReq
	err = c.BindAndValidate(&req)
	resp := new(base.BaseResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	err = logic.NewUser(data.Default()).LeaveChat(ctx, userID, req.ID)

	if err != nil {
		resp.ErrCode = base.ErrCode_LeaveChatError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetProfile .
// @router /api/v1/user/profile [GET]
func GetProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetProfileReq
	err = c.BindAndValidate(&req)
	resp := new(network.GetProfileResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetProfile(ctx, userID, req.PageID, req.PageSize)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetTimelineError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	info := make([]*network.StatusInfo, len(res))
	err = copier.Copy(&info, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.Info = info
	resp.PageID = req.PageID
	c.JSON(consts.StatusOK, resp)
}

// SearchUser .
// @router /api/v1/user/search [POST]
func SearchUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.SearchUserReq

	err = c.BindAndValidate(&req)
	// fmt.Println("searchUserReq:", req)
	resp := new(network.SearchUserResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).SearchUser(ctx, userID, req.Expr)
	if err != nil {
		resp.ErrCode = base.ErrCode_SearchUserError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	entries := make([]*network.UserEntry, len(res))
	err = copier.Copy(&entries, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.UserEntries = entries
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFollowings .
// @router /api/v1/user/followings [GET]
func GetFollowings(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(network.GetFollowingsResp)
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetFollowings(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetFollowingsError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	entries := make([]*network.UserEntry, len(res))
	err = copier.Copy(&entries, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.UserEntries = entries
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFollowers .
// @router /api/v1/user/followers [GET]
func GetFollowers(ctx context.Context, c *app.RequestContext) {
	var err error

	resp := new(network.GetFollowersResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetFollowers(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetFollowersError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	entries := make([]*network.UserEntry, len(res))
	err = copier.Copy(&entries, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.UserEntries = entries
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFriends .
// @router /api/v1/user/friends [GET]
func GetFriends(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(network.GetFollowingsResp)
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetFriends(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetFriendsError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	entries := make([]*network.UserEntry, len(res))
	err = copier.Copy(&entries, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.UserEntries = entries
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetChatList .
// @router /api/v1/user/chatlist [GET]
func GetChatList(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(network.GetChatListResp)
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewUser(data.Default()).GetChatList(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_GetChatListError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	entries := make([]*network.ChatEntry, len(res))
	fmt.Println("GetChatList:", res)
	err = copier.Copy(&entries, res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.Info = entries
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"

	c.JSON(consts.StatusOK, resp)
}
