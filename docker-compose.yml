version: '2.1'

services:
  zoo-social:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo-social
    ports:
      - "21811:21811"
    environment:
      ZOOKEEPER_CLIENT_PORT: 21811
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka-social:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka-social
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:21811"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo-social
  kafka-ui-social:
    container_name: kafka-ui-social
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka-social
    environment:
      DYNAMIC_CONFIG_ENABLED: "TRUE"
  redis-social:
    container_name: redis-social
    hostname: redis
    image: redis:latest
    volumes:
      - ./data/data/redis:/data
      - ./data/logs/redis:/logs
    ports:
      - 6379:6379

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.84.0
    command: [ "--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888"   # Prometheus' metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679" # zpages extension
    depends_on:
      - jaeger-all-in-one

  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268"
      - "14250:14250"
      - "6831:6831"
  prometheus:
    image: prom/prometheus:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules:/etc/prometheus/alert.rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
  grafana:
    image: grafana/grafana:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    volumes:
      - ./data/configs/minio:/root/.minio
      - ./data/data/minio:/data
    environment:
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123
    ports:
      - "9000:9000"
      - "9001:9001"
volumes:
  grafana_data: {}
  prometheus_data: {}
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8888:8888"
  #   depends_on:
  #     - kafka-social
  #     - redis-social
  #   environment:
  #     IS_DOCKER: "true"
  #   entrypoint:  # override the entrypoint and cmd in Dockerfile
  #     [
  #       "/app/wait-for.sh",
  #       "kafka1:9092",
  #       "--",
  #       "/app/start.sh"
  #     ]
  #   command: [ "/app/main" ]
